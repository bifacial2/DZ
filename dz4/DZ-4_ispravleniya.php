<?php
echo '<h1>---------------------------------------Задача 9 (+1)--------------------------------------------------------------------</h1>';

/*9. ( +1 ) Таблица умножения. Напишите функцию, которая принимает на вход два параметра: количество строк и количество колонок. Функция возвращает ( не выводит на экран! ) таблицу умножения вида http://joxi.ru/brR577kiJJNRXA . Можно использовать table или div теги html. Цвет перемножаемых колонок и строк можете задать отдельным третьим параметром в виде hex-кода цвета .*/

echo tabl(10, 10);
function tabl($a, $b)
{
    $tableString = '<table border = 1>';
    for ($i = 1; $i <= $a; $i++) {
        $tableString .= "<tr>";
        for ($j = 1; $j <= $b; $j++) {
            if ($i == 1 || $j == 1) {
                $tableString .= "<td bgcolor = #32cd32><b>" . $i * $j . "</b></td>";
            } else {
                $tableString .= "<td><b>" . $i * $j . "</b></td>";
            }
        }
        $tableString .= "</tr>";
    }
    $tableString .= '</table>';
    return $tableString;
}

echo '<h1>---------------------------------------Задача 12 (+1)--------------------------------------------------------------------</h1>';

/*12.( +1 ) Напишите рекурсивную функцию , принимающую на вход натуральное число $n. Функция возвращает строку из всех чисел от 1 до $n либо от $n до 1. За порядок сортировки должен отвечать дополнительный параметр функции - $order, который может принимать значение ‘desc’ (убывающий) или ‘asc’ (возрастающий) и по-умолчанию должен быть равен ‘desc’.*/

$temp_var = 1;
$order='desc';
function recursion($a, $order){
    global $temp_var;
    if($order == 'desc') {
        if ($a > 0) {
            echo "$a\n";
            recursion($a - 1, $order);
        }
    }
    if ($order == 'ask' && $temp_var <= $a) {
        echo "$temp_var\n";
        $temp_var ++;
        recursion($a, $order);
    }
    return;
}
recursion(20, $order);